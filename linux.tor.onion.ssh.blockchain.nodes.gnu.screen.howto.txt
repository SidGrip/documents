                 ################################
                 # WITHOUT WARRANTY OF ANY KIND #
                 ################################
                 
### tutorial for Debian Linux, finding most easy and secure way how to:
    # SSH over TOR stealth hidden service
    # cryptocurrency nodes configuration to run in tor/onion
    # cc nodes decrypt password most secured way:
        # prevent password to be seen as plain-text
        # prevent password to be stored in bash history

### server machine needs to autoconnect to network/wireless without login
    # most easiest way is to use nmtui command by root
        # nmtui >>  edit connection >> select connection
            # enable automatically autoconnect
            # enable available to all users

### install ssh, tor service, gnu screen and joe text editor

    apt install tor openssh-server screen joe

### on joe editor
    # to save file push CTRL + k + x
    # to cancel file edit CTRL + c
    # for more help CTRL + k + h

### configure tor hidden service for ssh and blockchain nodes

    # Edit server tor config, Ensure following lines are (anywhere) in
        
        joe /usr/share/tor/tor-service-defaults-torrc
        
            # If anyone of the above lines are missing, add them using the echo command as before, for example:
        
                ControlPort 9051
                CookieAuthentication 1
                CookieAuthFileGroupReadable 1
            
                HiddenServiceDir /var/lib/tor/hidden-service-ssh/
                HiddenServicePort 22 127.0.0.1:22
                HiddenServiceAuthorizeClient stealth hidden-service-ssh
        
    # server tor service restart is needed after config edit

        service tor restart
    
    # on server to check autogenerated onion address and password for hidden ssh service
    
        less /var/lib/tor/hidden-service-ssh/hostname
    
            # on client machine update tor client config like and add line from previous output
        
                joe /usr/share/tor/tor-service-defaults-torrc
                
                    # added lines on client should looks like this:
                        
                        # HidServAuth onion-address authorization-key
    
    # server and client username allow to use tor
        
        sudo usermod -a -G debian-tor username

    # now logout and login the usernames

### configure ssh on server to be allowed only from localhost and tor
    
    # file
        joe /etc/ssh/sshd_config
            # update with line
                ListenAddress 127.0.0.1
                
    # or file
        joe /etc/hosts.allow
            # update with line
                sshd: localhost
                
### to configure ssh on client machine and export public key to server

    # generate enough good client private key for sh, best to also enter password when asked
    # if you already have generated and using ssh no need for this step
        ssh-keygen -t rsa -b 4096
        
    # export public key from client to server machine
        ssh-copy-id username@server_address.onion
    
### disable password auth on server
    joe /etc/ssh/sshd_config
        # update line PasswordAuthentication to PasswordAuthentication_no
            # save file ctrl + k + x
                # restart ssh service
                    service ssh restart
            
### configure blockchain nodes on server to connect to network by tor

    CCCONF=~/.pivx/pivx.conf
    echo "" >> $CCCONF
    echo "listen=1" >> $CCCONF
    echo "listenonion=0" >> $CCCONF
    echo "#~ onlynet=ipv6" >> $CCCONF
    echo "#~ onlynet=ipv4" >> $CCCONF
    echo "onlynet=onion" >> $CCCONF
    echo "maxconnections=12" >> $CCCONF
    echo "#~ proxy=127.0.0.1:9050" >> $CCCONF
    echo "onion=127.0.0.1:9050" >> $CCCONF
    echo "bind=127.0.0.1" >> $CCCONF
    echo "bantime=180" >> $CCCONF

    CCCONF=~/.blocknet/blocknet.conf
    echo "" >> $CCCONF
    echo "listen=1" >> $CCCONF
    echo "listenonion=0" >> $CCCONF
    echo "#~ onlynet=ipv6" >> $CCCONF
    echo "#~ onlynet=ipv4" >> $CCCONF
    echo "onlynet=onion" >> $CCCONF
    echo "maxconnections=12" >> $CCCONF
    echo "#~ proxy=127.0.0.1:9050" >> $CCCONF
    echo "onion=127.0.0.1:9050" >> $CCCONF
    echo "bind=127.0.0.1" >> $CCCONF
    echo "bantime=180" >> $CCCONF

    CCCONF=~/.litecoin/litecoin.conf
    echo "" >> $CCCONF
    echo "listen=1" >> $CCCONF
    echo "listenonion=0" >> $CCCONF
    echo "#~ onlynet=ipv6" >> $CCCONF
    echo "#~ onlynet=ipv4" >> $CCCONF
    echo "onlynet=onion" >> $CCCONF
    echo "maxconnections=12" >> $CCCONF
    echo "#~ proxy=127.0.0.1:9050" >> $CCCONF
    echo "onion=127.0.0.1:9050" >> $CCCONF
    echo "bind=127.0.0.1" >> $CCCONF
    echo "bantime=180" >> $CCCONF

    CCCONF=~/.bitcoin/bitcoin.conf
    echo "" >> $CCCONF
    echo "listen=1" >> $CCCONF
    echo "listenonion=0" >> $CCCONF
    echo "#~ onlynet=ipv6" >> $CCCONF
    echo "#~ onlynet=ipv4" >> $CCCONF
    echo "onlynet=onion" >> $CCCONF
    echo "maxconnections=12" >> $CCCONF
    echo "#~ proxy=127.0.0.1:9050" >> $CCCONF
    echo "onion=127.0.0.1:9050" >> $CCCONF
    echo "bind=127.0.0.1" >> $CCCONF
    echo "bantime=180" >> $CCCONF

### multiple opened terminals by gnu screen on one ssh session 

    # screen usage quick help

        # to reconnect to last used screen session 
            screen -r

            # Some of the regularly used Linux screens commands:
            # Ctrl+a c Command to create a new window (with shell)
            # Ctrl+a " Command to list all window
            # Ctrl+a 0 Switch to window 0 (by number )
            # Ctrl+a A The command to rename the current window
            # Ctrl+a S Command to split current region horizontally into two regions
            # Ctrl+a | Split current region vertically into two regions
            # Ctrl+a tab Command to switch the input focus to the next region
            # Ctrl+a Ctrl+a Toggle between the current and previous region
            # Ctrl+a Q Close all regions but the current one
            # Ctrl+a X Command to close the current region

    # screen session on server
        # connect to server by ssh
            ssh username@server_address.onion
        # run first time screen session or reconnect to actually opened session
            screen -R
                # use ctrl + a + c to create enough screens
                    #use ctrl + a + <0..9> or <n p> or <">  to switch between screens
                        # manage your running cc nodes cli other command whatever...
                            # screen also support terminal output page up down... ctrl + a + escape
                                # onde you are done use ctrl + a + d to detach from screen session
                                    # enytime you need something, just ssh and reconnect to running screen
            
### hopefully you have all blockchain nodes downloaded or compiled by your own if not you can follow howto
    linux_blocknet_blockdx_dxmakerbot_howto.txt

### how to unlock wallet by password for your crypto currency without been exposed to screen or bash history
    
    # run blocknet wallet used for staking example command
        cd ~/Downloads/cryptotrading/blocknet/git.source/src/ && ./blocknetd -printtoconsole -nodebuglogfile -datadir=$HOME/.blocknet_staking/ -wallet=wallet_block_staking
        
    # run blocknet wallet used for DEX dxbot trading/liquidity example command
        cd ~/Downloads/cryptotrading/blocknet/git.source/src/ && ./blocknetd -printtoconsole -nodebuglogfile -datadir=$HOME/.blocknet/ -wallet=wallet_block_dex
        
    # run bitcoin wallet used for DEX dxbot trading/liquidity example command
        cd ~/Downloads/cryptotrading/bitcoin/git.source/src/ && ./bitcoind -printtoconsole -nodebuglogfile -datadir=$HOME/.bitcoin/ -wallet=wallet_btc_dex
    
    # run litecoin wallet used for DEX dxbot trading/liquidity example command
        cd ~/Downloads/cryptotrading/litecoin/git.debian/src/ && ./litecoind -printtoconsole -nodebuglogfile -datadir=$HOME/.litecoin/  -wallet=wallet_ltc_dex
        
    # some wallets cli like bitcoin support new secure way to unlock wallet
        ./bitcoin-cli -stdinwalletpassphrase walletpassphrase 9999999999
    
    # some wallets needs workaround like this to unlock wallet for staking only
        ./blocknet-cli walletpassphrase "$(read -sp "aaaaa" undo; echo $undo;undo=)" 9999999999 true
        
    # some wallets needs workaround like this to fully unlock wallet
        ./blocknet-cli walletpassphrase "$(read -sp "aaaaa" undo; echo $undo;undo=)" 9999999999
    
### server summary:
    # server accessible trough SSH stealth onion hidden service
    # server running terminal screen session with multiple commands
    # cc nodes running as anonymous onion clients
